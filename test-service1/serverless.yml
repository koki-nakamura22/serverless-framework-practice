service: test-service1

frameworkVersion: '2'

provider:
  name: aws
  stage: ${opt:stage, "dev"}
  endpointType: REGIONAL
  runtime: python3.8
  versionFunctions: true
  lambdaHashingVersion: 20201221
  profile: serverless-admin
  region: ap-northeast-1
  apiGateway:
    apiKeys:
      - name: ${file(./config/serverless-apigateway.yml):${self:provider.stage}.apikey-name}
        value: ${file(./config/serverless-apigateway.yml):${self:provider.stage}.apikey-value}
    usagePlan:
      quota:
        limit: 100
        offset: 0
        period: DAY
      throttle:
        burstLimit: 200
        rateLimit: 100
  deploymentBucket:
    name: ${file(./config/serverless-s3.yml):deploymentBucketName}
    maxPreviousDeploymentArtifacts: ${file(./config/serverless-s3.yml):maxPreviousDeploymentArtifacts}

package:
  individually: true
  exclude:
    - config/**
    - functions/**

layers:
  common:
    path: layers

functions:
  hello:
    handler: functions/hello/handler.hello
    events:
      - http:
          path: /hello
          method: get
          cors: true
          private: true
    layers:
      - { Ref: CommonLambdaLayer }
    package:
      individually: true
      include:
        functions/hello/*
  get_today:
    handler: functions/get_today/handler.hello
    events:
      - http:
          path: /get_today
          method: get
          cors: true
          private: true
    layers:
      - { Ref: CommonLambdaLayer }
    package:
      individually: true
      include:
        functions/get_today/*
  get_func_with_required_query_params:
    handler: functions/get_func_with_required_query_params/handler.get_func_with_required_query_params
    events:
      - http:
          path: /get_func_with_required_query_params
          method: get
          cors: true
          private: true
          request:
            parameters:
              querystrings:
                param1: true
                param2: true
                param3: true
    package:
      individually: true
      include:
        functions/get_func_with_required_query_params/*

plugins:
  - serverless-prune-plugin

custom:
  prune:
    automatic: true # デプロイ時にserverless-prune-pluginを自動で動作させる
    number: 3 # AWS Lambda上で管理される世代の最大数
